package {{invokerPackage}}.sync;

import android.accounts.Account;
import android.accounts.AccountManager;
import android.content.AbstractThreadedSyncAdapter;
import android.content.ContentProviderClient;
import android.content.ContentResolver;
import android.content.ContentValues;
import android.content.Context;
import android.content.SharedPreferences;
import android.content.SyncRequest;
import android.content.SyncResult;
import android.database.Cursor;
import android.os.Build;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.util.Log;

import {{invokerPackage}}.ApiException;
import {{invokerPackage}}.BuildConfig;
import {{invokerPackage}}.R;
{{#models}}
    {{#model}}
        {{#vendorExtensions.x-android-sync-table}}
import {{invokerPackage}}.api.{{model.classname}}Api;
        {{/vendorExtensions.x-android-sync-table}}
    {{/model}}
{{/models}}
import {{invokerPackage}}.content.Contract;
import {{invokerPackage}}.content.DataUtils;
import {{invokerPackage}}.content.TableHelper;
{{#models}}
    {{#model}}
        {{#vendorExtensions.x-android-sync-table}}
import {{invokerPackage}}.model.{{model.classname}};
        {{/vendorExtensions.x-android-sync-table}}
    {{/model}}
{{/models}}

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

{{#models}}
    {{#model}}
        {{#vendorExtensions.x-android-sync-table}}
import static {{invokerPackage}}.content.DataUtils.get{{model.classname}}ColumnIndices;
        {{/vendorExtensions.x-android-sync-table}}
    {{/model}}
{{/models}}


/**
*
* Application: {{appName}} - {{appVersion}}
* Contact:     {{infoEmail}} - {{infoUrl}}
*
*/

public class SyncAdapter extends AbstractThreadedSyncAdapter {

    public static final String LOG_TAG = "{{appName}}: " + SyncAdapter.class.getSimpleName();

//    private static final String mBasePath = "http://" + BuildConfig.URL_REMOTE_SERVER_ADDRESS + ":" + BuildConfig.URL_REMOTE_SERVER_PORT + "/api";
    private static final String mBasePath = "http://" + BuildConfig.URL_LOCAL_SERVER_ADDRESS + ":" + BuildConfig.URL_LOCAL_SERVER_PORT + "/api";

    private static final String SYNC_INITIAL_LOAD_FROM_SERVER = "sync_initialLoadFromServer";
    private static final String SYNC_CREATED_AT_FROM = "sync_createdAtFrom";
    private static final String SYNC_UPDATED_AT_FROM = "sync_updatedAtFrom";
{{#models}}
    {{#model}}
        {{#vendorExtensions.x-android-sync-table}}
    private static final String SYNC_DOWNLOAD_MANY_{{model.classname.toUpperCase}}S_FROM_SERVER = "sync_{{model.classname.toLowerCase}}sReadManyFromServer";
    private static final String SYNC_UPLOAD_MANY_{{model.classname.toUpperCase}}S_TO_SERVER = "sync_{{model.classname.toLowerCase}}sUploadManyToServer";
        {{/vendorExtensions.x-android-sync-table}}
    {{/model}}
{{/models}}

    private static final String FILENAME = "SyncLog";
    private static final int MINUTE_IN_SECS = 60;
    public static final int SYNC_INTERVAL = 1 * MINUTE_IN_SECS;
    public static final int SYNC_FLEXTIME = SYNC_INTERVAL / 3;

    private Context mContext;
    ContentResolver mContentResolver;

    /**
     * Set up the sync adapter
     *
     * @param context
     * @param autoInitialize
    */
    public SyncAdapter(Context context, boolean autoInitialize) {
        super(context, autoInitialize);
        mContext = context;
        mContentResolver = context.getContentResolver();
    }

    /**
     * Setup up the sync adapter. This form of the
     * constructor maintains compatibility with Android 3.0
     * and later platform versions
     *
     * @param context
     * @param autoInitialize
     * @param allowParallelSyncs
     */
    public SyncAdapter(Context context, boolean autoInitialize, boolean allowParallelSyncs) {
        super(context, autoInitialize, allowParallelSyncs);
        mContext = context;
        mContentResolver = context.getContentResolver();
    }

    @Override
    public void onPerformSync(Account account, Bundle extras, String authority, ContentProviderClient provider, SyncResult syncResult) {

        Log.d(LOG_TAG, "Starting sync");

{{#models}}
    {{#model}}
        {{#vendorExtensions.x-android-sync-table}}
        /**
         * check, if a downstream sync is requested, such as
         * - initial load all {{model.classname.toLowerCase}}s -> SYNC_DOWNLOAD_MANY_{{model.classname.toUpperCase}}S_FROM_SERVER
         * - load all new {{model.classname.toLowerCase}}s -> SYNC_DOWNLOAD_MANY_{{model.classname.toUpperCase}}S_FROM_SERVER + SYNC_CREATED_AT_FROM
         * - load all changed {{model.classname.toLowerCase}}s -> SYNC_DOWNLOAD_MANY_{{model.classname.toUpperCase}}S_FROM_SERVER + SYNC_UPDATED_AT_FROM
         */
        boolean isDownloadMany{{model.classname}}sFromServer = extras.getBoolean(SYNC_DOWNLOAD_MANY_{{model.classname.toUpperCase}}S_FROM_SERVER, false);

        boolean isUploadMany{{model.classname}}sToServer = extras.getBoolean(SYNC_UPLOAD_MANY_{{model.classname.toUpperCase}}S_TO_SERVER, false);
        {{/vendorExtensions.x-android-sync-table}}
    {{/model}}
{{/models}}

        boolean isInitialLoadFromServer = extras.getBoolean(SYNC_INITIAL_LOAD_FROM_SERVER, false);
        long createdAtFrom = extras.getLong(SYNC_CREATED_AT_FROM, 0); // only used to restrict number of entities to be downloaded
        long updatedAtFrom = extras.getLong(SYNC_UPDATED_AT_FROM, 0); // only used to restrict number of entities to be downloaded

        if (isInitialLoadFromServer) {
{{#models}}
    {{#model}}
        {{#vendorExtensions.x-android-sync-table}}
            downloadMany{{model.classname}}sFromServer(0, 0);
        {{/vendorExtensions.x-android-sync-table}}
    {{/model}}
{{/models}}
{{#models}}
    {{#model}}
        {{#vendorExtensions.x-android-sync-table}}
        } else if (isDownloadMany{{model.classname}}sFromServer) {
            downloadMany{{model.classname}}sFromServer(createdAtFrom, updatedAtFrom);
        } else if (isUploadMany{{model.classname}}sToServer) {
            uploadMany{{model.classname}}sToServer();
        {{/vendorExtensions.x-android-sync-table}}
    {{/model}}
{{/models}}
        } else {
            // called by periodic Sync
            Log.d(LOG_TAG, "Syncing periodically ");
            writeLogFile(FILENAME, "Starting periodic sync", "");
            // TODO: 15.06.16 What do we do with a periodic sync?
{{#models}}
    {{#model}}
        {{#vendorExtensions.x-android-sync-table}}
            uploadMany{{model.classname}}sToServer();
        {{/vendorExtensions.x-android-sync-table}}
    {{/model}}
{{/models}}
        }

        Log.d(LOG_TAG, "Ending sync");

        Date timestamp = new Date();

        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(mContext);
        SharedPreferences.Editor editor = prefs.edit();
        editor.putLong(mContext.getString(R.string.last_sync_timestamp), timestamp.getTime());
        editor.commit();

    }

    public static void syncInitialLoad(Context context) {
        Log.d(LOG_TAG, "Invoking an initial load");

        Bundle bundle = new Bundle();

        bundle.putBoolean(ContentResolver.SYNC_EXTRAS_EXPEDITED, true);
        bundle.putBoolean(ContentResolver.SYNC_EXTRAS_MANUAL, true);
        bundle.putBoolean(SYNC_INITIAL_LOAD_FROM_SERVER, true);

        ContentResolver.requestSync(getSyncAccount(context),
            context.getString(R.string.content_authority), bundle);
    }

{{#models}}
    {{#model}}
        {{#vendorExtensions.x-android-sync-table}}
    public static void syncUpload{{model.classname}}s(Context context) {
        Log.d(LOG_TAG, "Invoking upload many {{model.classname}}s");

        Bundle bundle = new Bundle();

        bundle.putBoolean(ContentResolver.SYNC_EXTRAS_EXPEDITED, true);
        bundle.putBoolean(ContentResolver.SYNC_EXTRAS_MANUAL, true);

        bundle.putBoolean(SYNC_UPLOAD_MANY_{{model.classname.toUpperCase}}S_TO_SERVER, true);

        ContentResolver.requestSync(getSyncAccount(context),
                context.getString(R.string.content_authority), bundle);
    }

    private void downloadMany{{model.classname}}sFromServer(long createdAtFrom, long updatedAtFrom) {

        Log.d(LOG_TAG, "Download many {{model.classname}}s");

        if (createdAtFrom == 0 && updatedAtFrom == 0) {
            // we are doing an initial load with {{model.classname}}s from the server

            Log.d(LOG_TAG, "Initial load " + SYNC_DOWNLOAD_MANY_{{model.classname.toUpperCase}}S_FROM_SERVER);
            writeLogFile(FILENAME, "Starting initial load for: ", SYNC_DOWNLOAD_MANY_{{model.classname.toUpperCase}}S_FROM_SERVER);

            {{model.classname}}Api {{model.classname.toLowerCase}}Api = new {{model.classname}}Api();
            {{model.classname.toLowerCase}}Api.setBasePath(mBasePath);
            Log.d(LOG_TAG, "Base Path: " + mBasePath);

            // load all available {{model.classname}}s from backend server

            try {
                // first read all {{model.classname}}s from server
                List<{{model.classname}}> {{model.classname.toLowerCase}}s = {{model.classname.toLowerCase}}Api.{{model.classname.toLowerCase}}sReadAll();

                if (null != {{model.classname.toLowerCase}}s) {
                    Log.d(LOG_TAG, "Number of found {{model.classname}}s: " + Integer.toString({{model.classname.toLowerCase}}s.size()));

                    // then store all of them to local db
                    List<ContentValues> {{model.classname.toLowerCase}}sValues = new ArrayList<ContentValues>();

                    for ({{model.classname}} {{model.classname.toLowerCase}} : {{model.classname.toLowerCase}}s) {
                        {{model.classname.toLowerCase}}sValues.add(DataUtils.{{model.classname}}Entry.getContentValues({{model.classname.toLowerCase}}));
                    }

                    ContentValues[] contentValues = {{model.classname.toLowerCase}}sValues.toArray(new ContentValues[{{model.classname.toLowerCase}}sValues.size()]);

                    int inserted{{model.classname}}s = mContentResolver.bulkInsert(Contract.{{model.classname}}Entry.CONTENT_URI, contentValues);

                    Log.d(LOG_TAG, "Number of inserted {{model.classname}}s: " + Integer.toString(inserted{{model.classname}}s));

                }
            } catch (ApiException ae) {
                Log.d(LOG_TAG, ae.toString());
            } catch (TimeoutException te) {
                Log.d(LOG_TAG, te.getMessage());
            } catch (InterruptedException ie) {
                Log.d(LOG_TAG, ie.getMessage());
            } catch (ExecutionException ee) {
                Log.d(LOG_TAG, ee.getMessage());
            }

            writeLogFile(FILENAME, "Ending initial load for: ", SYNC_DOWNLOAD_MANY_{{model.classname.toUpperCase}}S_FROM_SERVER);

        } else {

            // TODO: 15.06.16 implement selective download based on createdAtFrom and changedAtFrom

        }
    }

    private void uploadMany{{model.classname}}sToServer() {
        Log.d(LOG_TAG, "Upload many {{model.classname}}s");
        Log.d(LOG_TAG, "Syncing " + SYNC_UPLOAD_MANY_{{model.classname.toUpperCase}}S_TO_SERVER);
        writeLogFile(FILENAME, "Starting sync for: ", SYNC_UPLOAD_MANY_{{model.classname.toUpperCase}}S_TO_SERVER);

        // we have locally changed {{model.classname}}s which we want to upload/sync with the server

        Cursor cursor = mContentResolver.query(Contract.{{model.classname}}Entry.CONTENT_URI_{{model.classname.toUpperCase}}S_TO_BE_UPLOADED, null, null, null, null);

        if (null != cursor) {

            {{model.classname}}Api {{model.classname.toLowerCase}}Api = new {{model.classname}}Api();
            {{model.classname.toLowerCase}}Api.setBasePath(mBasePath);
            Log.d(LOG_TAG, "Base Path: " + mBasePath);

            int nof{{model.classname}}s = cursor.getCount();
            Log.d(LOG_TAG, "Number of {{model.classname}}s to by synced with server: " + Integer.toString(nof{{model.classname}}s));
            TableHelper.{{model.classname}}ColumnIndices {{model.classname.toLowerCase}}ColumnIndices = get{{model.classname}}ColumnIndices(cursor);
            while (cursor.moveToNext()) {
                {{model.classname}} {{model.classname.toLowerCase}} = DataUtils.get{{model.classname}}sFromContentValues(cursor, {{model.classname.toLowerCase}}ColumnIndices);
                {{model.classname}} new{{model.classname}};
                try {
                    if (null != {{model.classname.toLowerCase}}.getId()) {
                        /**
                         * the {{model.classname.toLowerCase}} to be uploaded already exists on the backend server, thus we need
                         * to issue a an update to server
                         */
                        new{{model.classname}} = {{model.classname.toLowerCase}}Api.{{model.classname.toLowerCase}}sUpdateOne({{model.classname.toLowerCase}}.getId(), {{model.classname.toLowerCase}});
                        Log.d(LOG_TAG, "Modified {{model.classname}} on Backend Server: " + new{{model.classname}}.toString());

                    } else {
                        new{{model.classname}} = {{model.classname.toLowerCase}}Api.{{model.classname.toLowerCase}}sCreate({{model.classname.toLowerCase}});
                        Log.d(LOG_TAG, "New {{model.classname}} on Backend Server: " + new{{model.classname}}.toString());
                    }
                    ContentValues values = new ContentValues();
                    values.put(Contract.Generic.COLUMN_BACKEND_ID, new{{model.classname}}.getId());
                    values.put(Contract.Generic.COLUMN_BACKEND_CREATED_AT, new{{model.classname}}.getCreatedAt().getTime());
                    values.put(Contract.Generic.COLUMN_BACKEND_UPDATED_AT, new{{model.classname}}.getUpdatedAt().getTime());
                    values.put(Contract.Generic.COLUMN_BACKEND_VERSION_ID, new{{model.classname}}.getVersionID());
                    values.put(Contract.Generic.COLUMN_SYNC_TO_DELETE, false);
                    values.put(Contract.Generic.COLUMN_SYNC_TO_UPDATE, false);
                    values.put(Contract.Generic.COLUMN_MARKED_AS_DELETED, false);
                    String selection =
                            Contract.{{model.classname}}Entry.TABLE_NAME + "." + Contract.{{model.classname}}Entry._ID + " = ? ";
                    String[] selectionArgs = new String[]{
                            Integer.toString(cursor.getInt({{model.classname.toLowerCase}}ColumnIndices.COL_IDX_LOCAL_ID))
                    };

                    int nOfUpdated{{model.classname}}s = mContentResolver.update(Contract.{{model.classname}}Entry.CONTENT_URI_{{model.classname.toUpperCase}}_FROM_SERVER, values, selection, selectionArgs);

                } catch (TimeoutException e) {
                    e.printStackTrace();
                } catch (ExecutionException e) {
                    e.printStackTrace();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                } catch (ApiException e) {
                    e.printStackTrace();
                }
            }
            cursor.close();
            writeLogFile(FILENAME, "Ending sync for: ", SYNC_UPLOAD_MANY_{{model.classname.toUpperCase}}S_TO_SERVER);

        }
    }

        {{/vendorExtensions.x-android-sync-table}}
    {{/model}}
{{/models}}
    public static void initializeSyncAdapter(Context context) {
        Log.d(LOG_TAG, "Initialize SyncAdapter.");
        getSyncAccount(context);
    }

    /**
     * Helper method to get the fake account to be used with SyncAdapter, or make a new one
     * if the fake account doesn't exist yet.  If we make a new account, we call the
     * onAccountCreated method so we can initialize things.
     *
     * @param context The context used to access the account service
     * @return a fake account.
     */
    public static Account getSyncAccount(Context context) {
        // Get an instance of the Android account manager
        AccountManager accountManager =
                (AccountManager) context.getSystemService(Context.ACCOUNT_SERVICE);

        // Create the account type and default account
        Account newAccount = new Account(
                context.getString(R.string.account_name),
                context.getString(R.string.sync_account_type)
        );

        // If the password doesn't exist, the account doesn't exist
        if (null == accountManager.getPassword(newAccount)) {

            /*
             * Add the account and account type, no password or user data
             * If successful, return the Account object, otherwise report an error.
             */
            if (!accountManager.addAccountExplicitly(newAccount, "", null)) {
                return null;
            }
            /*
             * If you don't set android:syncable="true" in
             * in your provider element in the manifest,
             * then call ContentResolver.setIsSyncable(account, AUTHORITY, 1)
             * here.
             */

            onAccountCreated(newAccount, context);
        }
        return newAccount;
    }

    private static void onAccountCreated(Account newAccount, Context context) {
        /*
         * Since we've created an account
         */
        SyncAdapter.configurePeriodicSync(context, SYNC_INTERVAL, SYNC_FLEXTIME);

        /*
         * Without calling setSyncAutomatically, our periodic sync will not be enabled.
         */
        ContentResolver.setSyncAutomatically(newAccount, context.getString(R.string.content_authority), true);

        /*
         * Finally, let's do a sync to get things started
         */
        syncInitialLoad(context);
    }

    /**
     * Helper method to schedule the sync adapter periodic execution
     */
    public static void configurePeriodicSync(Context context, int syncInterval, int flexTime) {
        Account account = getSyncAccount(context);
        String authority = context.getString(R.string.content_authority);
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
            // we can enable inexact timers in our periodic sync
            SyncRequest request = new SyncRequest.Builder().
                    syncPeriodic(syncInterval, flexTime).
                    setSyncAdapter(account, authority).
                    setExtras(new Bundle()).build();
            ContentResolver.requestSync(request);
        } else {
            ContentResolver.addPeriodicSync(account,
                    authority, new Bundle(), syncInterval);
        }
    }

    private void writeLogFile(String FILENAME, String syncState, String toBySynced) {
        FileOutputStream fos;
        try {
            fos = mContext.openFileOutput(FILENAME, Context.MODE_APPEND | Context.MODE_WORLD_READABLE);
            Date date = new Date();
            String string = date.toString() + " " + LOG_TAG + ": " + syncState + toBySynced + "\n";
            fos.write(string.getBytes());
            fos.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

}