{{#useAndroidMavenGradlePlugin}}
group = '{{groupId}}'
project.version = '{{artifactVersion}}'
{{/useAndroidMavenGradlePlugin}}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.5.+'
        {{#useAndroidMavenGradlePlugin}}
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.3'
        {{/useAndroidMavenGradlePlugin}}
    }
}

allprojects {
    repositories {
        jcenter()
    }
}


apply plugin: 'com.android.library'
{{#useAndroidMavenGradlePlugin}}
apply plugin: 'com.github.dcendents.android-maven'
{{/useAndroidMavenGradlePlugin}}

android {
    compileSdkVersion 23
    buildToolsVersion '23.0.2'
    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 23
    }
    buildTypes {
        debug {
            buildConfigField 'String', 'URL_REMOTE_SERVER_PORT', '\"' + '{{#swagger}}{{vendorExtensions.x-android-sync-base-path-remote-port}}{{/swagger}}' + '\"'
            buildConfigField 'String', 'URL_REMOTE_SERVER_ADDRESS', '\"' + '{{#swagger}}{{vendorExtensions.x-android-sync-base-path-remote-address}}{{/swagger}}' + '\"'
            buildConfigField 'String', 'URL_LOCAL_SERVER_PORT', '\"' + '{{#swagger}}{{vendorExtensions.x-android-sync-base-path-local-port}}{{/swagger}}' + '\"'
            buildConfigField 'String', 'URL_LOCAL_SERVER_ADDRESS', '\"' + getIP() + '\"'
            println "Used IP Address is:" + getIP()
        }
        release {
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    // Rename the aar correctly
    libraryVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.aar')) {
                def fileName = "${project.name}-${variant.baseName}-${version}.aar"
                output.outputFile = new File(outputFile.parent, fileName)
            }
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}


ext {
    swagger_annotations_version = "1.5.0"
    gson_version = "2.3.1"
    httpclient_version = "4.5.2"
    httpcore_version = "4.4.4"
    volley_version = "1.0.19"
    junit_version = "4.12"
    robolectric_version = "3.0"
    concurrent_unit_version = "0.4.2"
}

dependencies {
    compile "io.swagger:swagger-annotations:$swagger_annotations_version"
    compile "com.google.code.gson:gson:$gson_version"
    compile "org.apache.httpcomponents:httpcore:$httpcore_version"
    compile "org.apache.httpcomponents:httpmime:$httpclient_version"
    compile "com.mcxiaoke.volley:library:${volley_version}@aar"
    testCompile "junit:junit:$junit_version"
    testCompile "org.robolectric:robolectric:${robolectric_version}"
    testCompile "net.jodah:concurrentunit:${concurrent_unit_version}"
}

afterEvaluate {
    android.libraryVariants.all { variant ->
        def task = project.tasks.create "jar${variant.name.capitalize()}", Jar
        task.description = "Create jar artifact for ${variant.name}"
        task.dependsOn variant.javaCompile
        task.from variant.javaCompile.destinationDir
        task.destinationDir = project.file("${project.buildDir}/outputs/jar")
        task.archiveName = "${project.name}-${variant.baseName}-${version}.jar"
        artifacts.add('archives', task);
    }
}

{{#useAndroidMavenGradlePlugin}}
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

artifacts {
    archives sourcesJar
}
{{/useAndroidMavenGradlePlugin}}

def getIP() {
    InetAddress result = null;

    Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces();
    while (interfaces.hasMoreElements()) {
        NetworkInterface networkInterface = interfaces.nextElement();
        if (networkInterface.getName().startsWith("en")) { // hack to avoid vpn and other devices to take precedence
            println "Display Name: " + networkInterface.displayName;
            Enumeration<InetAddress> addresses = networkInterface.getInetAddresses();
            while (addresses.hasMoreElements()) {
                InetAddress address = addresses.nextElement();
                if (!address.isLoopbackAddress()) {
                    if (address.isSiteLocalAddress()) {
                        println "Local Host is: " + address.getHostAddress();
                        return address.getHostAddress();
                    } else if (result == null) {
                        result = address;
                    }
                }
            }
        }
    }
    return (result != null ? result : InetAddress.getLocalHost()).getHostAddress();
}